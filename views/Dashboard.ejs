<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Movie Library</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
      integrity="sha384-eKp0o0Haoyttylu6L/3SmPo64wqGofNLLHQv7k9vP8txI5i9RLyN/kOz9zQdZ+Bf"
      crossorigin="anonymous"
    />
    <link rel="stylesheet" href="./assets/dashboard.css" />
  </head>
  <body>
    <div class="container">
      <header>
        <h1>Movie Library</h1>
        <input
          type="text"
          id="searchInput"
          placeholder="Search for movies..."
        />
        <button id="createListBtn">Create List</button>
      </header>
      <div id="listsContainer" class="lists-container">
        <h2>Your Lists</h2>
        <ul id="userLists"></ul>
      </div>
      <div id="searchResults" class="search-results"></div>
    </div>

    <div id="createListModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Create New List</h2>
        <input type="text" id="listTitle" placeholder="List Title" />
        <label for="listVisibility">Public:</label>
        <input type="checkbox" id="listVisibility" checked />
        <button id="saveListBtn">Save List</button>
      </div>
    </div>

    <div id="manageListModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <h2 id="manageListTitle">List Title</h2>
        <label for="togglePublic">Public:</label>
        <input type="checkbox" id="togglePublic" />
        <div id="listMoviesContainer" class="list-movies-container"></div>
        <input type="text" id="addMovieInput" placeholder="Add movie..." />
        <button id="addMovieBtn">Add Movie</button>
      </div>
    </div>

    <script>
      function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(";").shift();
        return null;
      }

      let token = null;
      let lists = [];
      async function fetchCookie() {
        try {
          const response = await fetch("/getcookie");
          const data = await response.json();
          if (data && data.token) {
            token = data.token;
          }
        } catch (error) {
          console.error("Error fetching cookie:", error);
        }
      }

      // Fetch user's lists and display them
      async function fetchUserLists() {
        try {
          await fetchCookie(); // Get the token from cookies

          if (!token) {
            throw new Error("No token found");
          }

          const response = await fetch("/lists", {
            headers: {
              Authorization: `Bearer ${token}`, // Include the token in the headers
            },
          });

          lists = await response.json();
          displayUserLists(lists);
        } catch (error) {
          console.error("Error fetching user lists:", error);
        }
      }

      // Update the function to add movie to list
      async function addMovieToList(listId) {
        const movieTitle = prompt("Enter the movie title:");
        if (movieTitle) {
          try {
            console.log("Token for adding movie:", token);
            if (!token) {
              throw new Error("No token found");
            }
            const response = await fetch(`/lists/${listId}/addMovie`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${token}`,
              },
              body: JSON.stringify({ movieTitle }),
            });
            if (response.ok) {
              // Fetch the updated lists and display them
              fetchUserLists();
            } else {
              console.error("Error adding movie to list:", response.statusText);
            }
          } catch (error) {
            console.error("Error adding movie to list:", error);
          }
        }
      }

      // Function to display user's lists
      function displayUserLists(lists) {
        const userLists = document.getElementById("userLists");
        userLists.innerHTML = "";
        lists.forEach((list) => {
          const listItem = document.createElement("li");
          listItem.textContent = list.title;

          // Add a container for movies inside each list item
          const moviesContainer = document.createElement("ul");
          moviesContainer.classList.add("movies-container");
          list.movies.forEach((movie) => {
            const movieItem = document.createElement("li");
            movieItem.textContent = movie;
            moviesContainer.appendChild(movieItem);
          });

          // Adding button to add movie to the list
          const addButton = document.createElement("button");
          addButton.textContent = "Add Movie";
          addButton.addEventListener("click", () => addMovieToList(list._id)); 

          // Adding an edit button
          const editButton = document.createElement("button");
          editButton.textContent = "Edit";
          editButton.addEventListener("click", () => editList(list));

          // Adding  delete button
          const deleteButton = document.createElement("button");
          deleteButton.textContent = "Delete";
          deleteButton.addEventListener("click", () => deleteList(list._id));

          listItem.appendChild(addButton);
          listItem.appendChild(editButton);
          listItem.appendChild(deleteButton);
          listItem.appendChild(moviesContainer); // Append movies container
          userLists.appendChild(listItem);
        });
      }

      // Function to edit a list
      async function editList(list) {
        const newTitle = prompt("Enter new title:", list.title);
        const newVisibility = confirm("Is this list public?");
        if (newTitle !== null) {
          try {
            if (!token) {
              throw new Error("No token found");
            }
            const response = await fetch(`/lists/${list._id}`, {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${token}`,
              },
              body: JSON.stringify({ title: newTitle, isPublic: newVisibility }),
            });
            if (response.ok) {
              fetchUserLists();
            } else {
              console.error("Error updating list:", response.statusText);
            }
          } catch (error) {
            console.error("Error updating list:", error);
          }
        }
      }

      //Function to delete  list
      async function deleteList(listId) {
        if (confirm("Are you sure you want to delete this list?")) {
          try {
            if (!token) {
              throw new Error("No token found");
            }
            const response = await fetch(`/lists/${listId}`, {
              method: "DELETE",
              headers: {
                Authorization: `Bearer ${token}`,
              },
            });
            if (response.ok) {
              fetchUserLists();
            } else {
              console.error("Error deleting list:", response.statusText);
            }
          } catch (error) {
            console.error("Error deleting list:", error);
          }
        }
      }

      //Cached DOM elements
      const createListBtn = document.getElementById("createListBtn");
      const listTitleInput = document.getElementById("listTitle");
      const listVisibilityCheckbox = document.getElementById("listVisibility");
      const createListModal = document.getElementById("createListModal");
      const closeCreateListModal = createListModal.querySelector(".close");
      const saveListBtn = document.getElementById("saveListBtn");
      const searchInput = document.getElementById("searchInput");
      const searchResults = document.getElementById("searchResults");
      const userLists = document.getElementById("userLists"); 

      // Event listener for creating a new list
      createListBtn.addEventListener(
        "click",
        () => (createListModal.style.display = "block")
      );

      // Close modal for creating a new list
      closeCreateListModal.addEventListener(
        "click",
        () => (createListModal.style.display = "none")
      );

      //Saving new list
      saveListBtn.addEventListener("click", async () => {
        const title = listTitleInput.value.trim();
        const isPublic = listVisibilityCheckbox.checked;
        if (title) {
          try {
            if (!token) {
              throw new Error("No token found");
            }
            const response = await fetch("/lists", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${token}`, 
              },
              body: JSON.stringify({ title, isPublic }),
            });

            if (response.ok) {
              fetchUserLists();
              createListModal.style.display = "none"; 
              listTitleInput.value = ""; 
              listVisibilityCheckbox.checked = true; 
            } else {
              console.error("Error creating list:", response.statusText);
            }
          } catch (error) {
            console.error("Error creating list:", error);
          }
        }
      });

      // Event listener for searching movies
        async function searchMovies(query) {
        try {
          const response = await fetch(`/search?q=${query}`);
          const movies = await response.json();
          displaySearchResults(movies);
        } catch (error) {
          console.error("Error searching for movies:", error);
        }
      }

      // Display search results
      function displaySearchResults(movies) {
        searchResults.innerHTML = "";
        movies.forEach((movie) => {
          const movieElement = document.createElement("div");
          movieElement.classList.add("movie");
          movieElement.innerHTML = `
                    <img src="${
                      movie.Poster !== "N/A"
                        ? movie.Poster
                        : "https://via.placeholder.com/150x225?text=No+Image"
                    }" alt="${movie.Title}">
                    <div class="movie-details">
                        <div class="movie-title">${movie.Title}</div>
                        <div class="movie-year">${movie.Year}</div>
                    </div>
                `;
          searchResults.appendChild(movieElement);
        });
      }

      searchInput.addEventListener("keypress", async (event) => {
        if (event.key === "Enter") {
          const query = searchInput.value.trim();
          if (query) {
            searchMovies(query);
          }
        }
      });

      fetchUserLists();
    </script>
  </body>
</html>